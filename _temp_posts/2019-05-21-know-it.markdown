---
layout: post
title:  "면접 준비"
subtitle:   "제발!"
categories: development
tags: iOS
header-img: img/ios-logo.png
---

## 자기소개

```
만나뵙게되어 반갑습니다. iOS 7년차 개발자 백진호입니다.
개발적인 소개먼저 드리면
주로 objective-c로 개발해왔으며 swift4.0부터 swift로 개발중입니다.
reactive에 관심이 있어 rxswift를 사용중이며, 주로 사용한 패턴은 mvvm패턴이고 신규 피처에서는 vip패턴으로 개발중입니다.
fastlane으로 인증서 관리 및 빌드 자동화 하고 있으며, jenkins로 원격빌드를 하고 있습니다.
cocoapods 과 carthage로 라이브러리 관리하고 있고, swiftlint로 코드 컨벤션 관리를 하고 있습니다.
유닛테스트는 비지니스로직을 기반해 테스트코드 작성하고 있으며, UI테스트는 회원가입 로직등 중요한 로직에서 BDD방식으로 작성하고 있습니다.
함께 성장할 수 있는 개발자, 도움을 줄 수 있는 개발자가 되도록 노력중입니다.
사내 세미나 형식으로 git, tdd, ci/cd 에 대해 발표한 적이 있습니다.
저는 정이많은 사람입니다.
취미로는 여행과 게임, 친한사람들과 술먹기입니다
카카오뱅크에서 함께고민하며 즐거운 개발을 하고싶은 지원자 백진호입니다.
```


## MVC MVP MVVM VIP 패턴
[MVC MVP MVVM](https://jino0910.github.io/development/2019/05/21/mvc-mvp-mvvm-pattern/)



정리중 - 자료구조
정리중 - 면접질문

## 면접질문

### Swift & iOS

**Q. ARC(Automatic Reference Counting)는 어느 시점에 작동하나요?**

컴파일 시점에 동작. 코드를 빌드(컴파일) 할때 특정 객체의 레퍼런스 카운트를 추적하여 0 가 되는 시점에 자동으로 release 코드를 넣어주는것을 말한다.

**Q. strong, weak, unowned 키워드를 어떤 상황에서 사용하고, 차이는 무엇인가요?**

- **strong**
레퍼런스 카운트를 증가시켜 ARC 로 인한 메모리해제를 피하고 객체를 안전하게 사용하고자 할 때 쓰인다. (비동기 클로저에 매개변수로 전달할때 적합합니다.)
- **weak**
객체가 할당될 때 레퍼런스 카운트를 증가시키지 않는다. 이 키워드는 Optional 타입에만 적용이 된다. 객체가 ARC 에 의해 메모리해제되면 nil 값이 할당된다.
- **unowned**
마찬가지로 객체가 할당될 때 레퍼런스 카운트를 증가시키지 않는다.
그러나 Non-Optional 타입으로 선언되어야 하며, 객체가 ARC 에 의해 메모리해제되더라도,
해당 객체 값을 존재하는 것으로 인지하며, 해당객체에 액세스 할 경우 런타임 오류를 발생시킨다.
객체의 라이프사이클이 명확하고 개발자에 의해 제어가 가능이 명확한 경우, weak Optional 타입 대신 사용하여 좀더 간결한 코딩이 가능하다.

**Q. 객체 간 순환참조를 발견하는 방법과 해결 방법은?**
- Xcode Memory Graph 이용해서 Live Object 들을 확인하고, Leak 된 Object 를 체크.
- Instrument 의 Leak 도구를 이용하여 체크.
- deinit 을 활용하여 로깅코드를 통해 체크.  
- '강한 참조' 없이 두 인스턴스 서로를 참조가 가능하게 해줍니다

**Q. Escaping Closure의 개념이 무엇인가요?**
클로저파라미터를 함수 외부에서도 사용 할수 있게 해주는 역할을 하는것 입니다.

**Q. 타입 캐스팅을 할 때 사용하는 키워드인 as, as?, as! 이 셋의 차이는 무엇인가요?**

- **as**
컴파일러가 타입 변환의 성공을 보장. 컴파일타임에 가능/불가능 여부를 알 수 있음
- **as?**
타입변환에 실패하는 경우 nil 을 리턴. 컴파일타임에 가능/불가능 여부를 알 수 없음
- **as!**
타입변환에 실패하는 경우 실행시간(Runtime) 오류를 발생시킴. 컴파일타임에 가능/불가능 여부를 알 수 없음

**Q. Swift에서 Class와 Struct의 차이는 무엇인가요?**

**Class - Reference type**
- 객체화 시 힙 메모리영역에 저장되며 ARC 로 객체의 메모리해제가 관리된다.
- 대입 연산 시 레퍼런스가 복사되어 할당됨. (공유 가능)
- 멀티스레딩 시 적절한 Lock 활용이 필요.
- 상속 가능.  
**Struct - Value type**
- 대입 연산 시 값 자체가 복제되어 할당됨(공유가 불가능).
- 불변성(Immutable) 구현에 유리.
- 멀티스레딩에 안전함.
- 상속이 불가능. (protocol 은 사용 가능) 

**Q. 4.1 버전 미만과 최신버전에서의 배열의 메소드인 FlatMap의 차이는 무엇인가요?**



### Layout

**Q. Frame 과 Bounds 의 차이는 무엇인가요?**

- **Frame**
SuperView(상위뷰) 좌표시스템 내에서의 view 의 위치(origin) 과 크기(size)
- **Bounds**
view 자기 자신의 좌표시스템에서의 위치와 크기. 부모부와의 위치관계와는 아무런 관계가 없다.

**Q. UIViewController클래스내 프로퍼티인TopLayoutGuide와 BottomLayoutGuide가 iOS11에서 deprecate된 이유와 이를 대체하기위해 어떤것이 생겼을까요?**

- **SafeAreaLayoutGuide**
기존 Top, Bottom 레이아웃 가이드와는 다르게, 안전한 컨텐츠 영역의 개념으로 등장했다.
기존이 상단, 하단, 두개의 사각 영역으로 되어있는 가이드영역이었다면,
SafeAreaLayoutGuide 의 영역은 하나의 사각 영역으로 되어있다.

**Q. UIStackView의 장점은 무엇이라고 생각하시나요?**

여러 뷰를 가로방향 또는 세로방향으로 배치할 때, 복잡한 컨스트레인트 설정 없이, 또는 컨스트레인트 만으로 설정하기 어려운 뷰의 배치등을 구현할 때 쓰일 수 있는 뷰.
aggangedSubview 로 하위뷰들이 관리되며, 이 하위뷰들에 Axis(가로 세로 방향), Alignment(세로방향 정렬), Distribution(가로방향 정렬), Spacing(하위뷰들간의 간격) 의 규칙을 적용할 수 있다.

**Q. Autolayout Constraint의 Priority의 개념이 무엇이고, 어떤상황에 사용하나요?**

말그대로 제약들간의 우선순위를 말한다.
다수의 뷰들에 여러제약이 걸려있을 때, 보통은 제약간의 충돌이 일어나지 않게끔 제약들을 설계하는게 일반적이지만,
상황에 따라서는 뷰들의 크기가 유동적으로 변하는 경우가 있는데, 이럴때 어떤 제약들이 서로간에 충돌이 일어나는 경우가 있을 수 있다.
이럴때에는 어떤 제약의 우선순위를 더 우위에 둘것이냐를 결정함으로써 이러한 충돌을 해결할 수 있다.

**Q. Content Hugging Priority의 개념이 무엇이고, 어떤상황에 사용하나요?**

**Q. UICollectionViewLayout클래스에 prepare 메소드는 어떤 역할을 하나요?**

레이아웃관련 연산이 일어날 때마다 가장 먼저 호출된다. 이 메소드에서 셀의 위치/크기 등을 계산하기 위한 사전처리를 할 수 있다.

**Q. UITableView를 구성할때 셀의 컨텐츠에 따라 높이를 설정하고싶다면 어떻게 해야하나요?**

델리게이트 메서드 rowHeight 에서는 UITableView.automaticDimension 값을 리턴하고 ,estimatedRowHeight 에서는 셀의 예측 높이값을 리턴한다.
이렇게 하면 오토레이아웃 테이블뷰 셀 구현이 가능하다.
마찬가지로 테이블뷰 셀은, 고정 높이가 아닌, 셀 안의 서브뷰들의 제약 구성으로 셀의 크기가 결정될 수 있도록 해야한다.

**Q. StoryBoard가 Git 에서 충돌이 발생했습니다. 어떻게 해결하고 예방 하시겠습니까?**

xml파일을 열어 충돌부분 수정 및 한쪽 브랜치를 선택해서 해결 할 수 있다면 스토리보드파일만 해당 브랜치로 체크아웃
스토리보드 분리 사용 및 snapkit 같은 코드형 오토레이아웃 라이브러리 사용

###Test

**Q. 커스텀뷰 클래스 내 Private Method를 테스트 할 수 있는 방법은 무엇이 있나요?**
**Q. UITest를 UnitTest로 대체할 수 있는 방법은 무엇인가요?**
**Q. Api서버를 강력하게 의존하는 뷰를 api요청없이 테스트 하는 방법은 무엇이 있나요?**

## swift 5.0 차이점
- result타입 추가
- case문 @unknown
- string안의 쌍따음표를 역슬래쉬 대신 #으로 감싸는 기능
- compactMapValues
- count 조건절
- 버전비교 >= 만 있었는데 < 추가
<!-- - Character Properties -->

## swift 문법


## rxswift
반응형프로그래밍(비동기 데이터 흐름 프로그래밍), 함수형 프로그래밍 이라고 합니다
관찰자인 observer와 관찰가능한 대상인 observable 있습니다. observer를 통하여 이벤트가 발생되고 observable을 구독하여 이벤트를 받아서 처리합니다.
Operator는 observable에서 발생되는 이벤트를 변환하고 처리 할 수 있다
Subject는 구독가능한 객체 입니다.

1. Publish Subject 
- default값(초기값)이 없다 
- 다른 옵져버가 subscribe한 순간 아무것도 주지 않지만 데이터가 발생하면 다 준다

2. Behavior Subject 
- default(초기값) 을 넣어주어야한다
- 값이 없을때 (초기값만 있을 때) subscribe하면 초기값을 주고, 값이 있을때 subcribe하면가장 최근의 것을 준다 
- 중간에 error가 나면 subscribe하고 있는 모든 옵져버들한테 에러가 간다 

3. ReplaySubject 
- default값(초기값)이 없다 
- 다른 옵져버가 subscribe하면 여태까지 발생했던것 다 준다

4. AsyncSubject
- default값(초기값)이 없다 
- Subject가 complete되면 가장 마지막 데이터를 그때서야 다른 옵져버에게 넘겨준다 



### subject와 relay의 차이점
 Subject 는 .completed 나 .error 를 받으면 subscribe 이 종료된다. 하지만 PublishRelay는 dispose되기 전까지 계속 작동하기 때문에 UI Event에서 사용하기 적절하다.

### Driver
- drive는 onError가 없다 
- UI용이다. RxCocoa를 import해야지 asDriver()를 쓸 수 있다
### Variable
Behavior Relay와 Variable은 모두 BehaviorSubject을 래핑한 것이다. 
하지만 Behavior Relay의 value는 get-only(읽기전용) 이고 Variable의 value는 get,set(읽기쓰기가능) 이 가능하다. 

### share()
Observable을 subscribe할 때마다, 새로운 Observable 시퀀스가 생성된다는 것이다.
share()는 말 그대로, 한번 생성한 시퀀스를 공유 하는 것이다.
share()를 사용하면 시퀀스에서 발생한 이벤트가 버퍼에 저장되고, 새로운 subscription은 버퍼에 저장된 이벤트를 전달받게 되는 것이다.


### iOS SDK에서 지원하는 비동기 프로그래밍
- NotificationCenter
- Delegate Pattern
- GCD (Grand Central Dispatch)
- Closure

##자동화빌드시스템
##git

##네비게이션 스크롤시 움직임

##프로토콜
> 구현해야 하는 동작을 정의하고 기능 구현을 하자
- 보안성
- value type 상속 (struct, enum)
- 다중상속과 수평확장
- generics


##generic
> 모든 타입에서 작동할 수 있는 유연하고, 재사용 가능한 함수와 타입을 작성하는 것


##관심있는 부분
- tdd
- bitrise
- snapkit
- reactorKit
- 성능도구
